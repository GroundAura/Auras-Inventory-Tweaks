; =====================================================================================================================
[Properties]
; =====================================================================================================================

; SET PROPERTIES -------------------------------------------------------
; Set values based on keywords/dataMembers
; Often set a property like material with a numerical value for proper sorting
; and then materialDisplay with text to show in the column.
; ALL_CAPS like MATERIAL_IRON are constant numerical values set by skyUI.
; For setting properties based on keywords:
; .keywords.keywordname.set = <'propertyToSet': valueToSet>
; For setting properties based on dataMembers:
; .dataMember#.filter = <'dataMemberToMatch': valueToMatch>
; .dataMember#.set = <'propertyToSet': valueToSet>

; Set Compound Properties -------------------------------------------------------
; Set properties that are a combination of other properties, used for icon column sorting
; By changing concatenateList you can change your icon column sorting.
; For example compoundProps.armorTotalSort.concatenateList = <'formType', 'weightClass', 'subType', 'material'>
; will put all heavy armor together and then sort by body/head/etc vs the default of putting all body/head/etc
; together and then sorting by weight class.

; Properties -------------------------------------------------------
; itemProperties
; magicProperties

; props.itemGroup.propertiesToSet = <'subType', 'subTypeDisplay'>
; props.itemGroup.filter = <'formType': ...>
; props.itemGroup.overwrite = true
; props.itemGroup.dataMember1.filter = <'formId': ...>
; props.itemGroup.dataMember1.set = <'subType': ..., 'subTypeDisplay': ...>
;
; props.itemGroupOther.propertiesToSet = <'subType', 'subTypeDisplay'>
; props.itemGroupOther.filter = <'formType': ...>
; props.itemGroupOther.defaultValues = <'subType': ..., 'subTypeDisplay': ...>
; props.itemGroupOther.keywords.SomeKeyword = <'subType': ..., 'subTypeDisplay': ...>
;
; itemProperties = <'itemGroup', 'itemGroupOther', ...>


; props.magicGroup.propertiesToSet = <'subType', 'subTypeDisplay'>
; props.magicGroup.filter = <'formType': ...>
; props.magicGroup.dataMember1.filter = <'formId': ...>
; props.magicGroup.dataMember1.set = <'subType': ..., 'subTypeDisplay': ...>
;
; props.magicGroupOther.propertiesToSet = <'subType', 'subTypeDisplay'>
; props.magicGroupOther.filter = <'formType': ...>
; props.magicGroupOther.defaultValues = <'subType': ..., 'subTypeDisplay': ...>
; props.magicGroupOther.keywords.SomeKeyword = <'subType': ..., 'subTypeDisplay': ...>
;
; magicProperties = <'magicGroup', 'magicGroupOther', ...>


; Icon Labels ------------------------------------------------------
; itemicons
; magicIcons

; props.itemIconGroup.propertiesToSet = <'iconLabel', 'iconColor'>
; props.itemIconGroup.filter = <'formType': ...>
; props.itemIconGroup.defaultValues = <'iconColor': ...>
; props.itemIconGroup.dataMember1.filter = ...
; props.itemIconGroup.dataMember1.set = ...
;
; itemicons = <'itemIconGroup', ...>


; props.magicIconGroup...
;
; magicIcons = <'magicIconGroup', ...>

; Compound Properties ----------------------------------------------
; itemCompoundProperties
; magicCompoundProperties

; compoundProps.itemCompoundGroup.propertyToSet = 'mySortProperty'
; compoundProps.itemCompoundGroup.filter = ...
; compoundProps.itemCompoundGroup.concatenateList = <'type', 'formType', ...>
; compoundProps.itemCompoundGroup.defaultValues = <'type': undefined, 'formType': undefined, ...>
;
; itemCompoundProperties = <'itemCompoundGroup', ...>


; compoundProps.magicCompoundGroup.propertyToSet = 'mySortProperty'
; compoundProps.magicCompoundGroup.filter = ...
; compoundProps.magicCompoundGroup.concatenateList = <'type', 'formType', ...>
; compoundProps.magicCompoundGroup.defaultValues = <'type': undefined, 'formType': undefined, ...>
;
; magicCompoundProperties = <'magicCompoundGroup', ...>













props.clothingIcon.propertiesToSet = <'iconLabel'>
props.clothingIcon.filter = <'formType': Form.TYPE_ARMOR>
props.clothingIcon.keywords.ClothingPouch = <'iconLabel': 'misc_goldsack', 'subTypeDisplay': 'Bag'>
props.clothingIcon.keywords.CDC_StorageHelpersToken = <'iconLabel': 'misc_goldsack', 'subTypeDisplay': 'Bag'>
props.clothingIcon.keywords.ClothingRing = <'iconLabel': 'armor_ring', 'subTypeDisplay': '$Ring'>
props.clothingIcon.keywords.ClothingEarrings = <'iconLabel': 'armor_ring', 'subTypeDisplay': 'Earrings'>
props.clothingIcon.keywords.ClothingEarCuffs = <'iconLabel': 'armor_ring', 'subTypeDisplay': 'Ear Cuffs'>
props.clothingIcon.keywords.ClothingAmulet = <'iconLabel': 'armor_amulet', , 'subTypeDisplay': '$Amulet'>
props.clothingIcon.keywords.ClothingCirclet = <'iconLabel': 'armor_circlet', , 'subTypeDisplay': '$Circlet'>
props.clothingIcon.keywords.ClothingBracelet = <'iconLabel': 'armor_circlet', 'subTypeDisplay': 'Bracelet'>
props.clothingIcon.keywords.ClothingCrown = <'iconLabel': 'armor_circlet', 'subTypeDisplay': 'Crown'>
props.clothingIcon.keywords.ArmorTorc = <'iconLabel': 'armor_circlet', 'subTypeDisplay': 'Torc'>
props.clothingIcon.keywords.JewelryTorc = <'iconLabel': 'armor_circlet', 'subTypeDisplay': 'Torc'>
props.clothingIcon.keywords.ClothingChoker = <'iconLabel': 'armor_amulet', 'subTypeDisplay': 'Choker'>
props.clothingIcon.keywords.ClothingHighNecklace = <'iconLabel': 'armor_amulet', 'subTypeDisplay': 'Necklace'>

props.otherIcon.propertiesToSet = <'iconLabel'>
props.otherIcon.filter = <'formType': Form.TYPE_MISC>
props.otherIcon.keywords.CDC_StorageHelpersToken = <'iconLabel': 'misc_goldsack'>

props.weaponIcon.propertiesToSet = <'iconLabel'>
props.weaponIcon.filter = <'formType': Form.TYPE_WEAPON>
props.weaponIcon.keywords.DLC2NordicPickaxe = <'iconLabel': 'weapon_pickaxe'>

itemIcons = <clothingIcon, weaponIcon, otherIcon>
